--- 
Text_Column: 
  data_regexp: .*
  generalize: Text_Column
  rails_type: text
  import_class: Text_Column
  ruby_conversion: str
VARCHAR_Column: 
  data_regexp: .{0,255}
  generalize: Text_Column
  rails_type: string
  import_class: VARCHAR_Column
  ruby_conversion: str
Integer_Column: 
  data_regexp: "[0-9]+"
  generalize: VARCHAR_Column
  rails_type: integer
  import_class: Integer_Column
  ruby_conversion: str.to_i
Float_Column: 
  data_regexp: "[0-9]*\\.[0-9]+"
  generalize: VARCHAR_Column
  rails_type: float
  import_class: Float_Column
  ruby_conversion: str.to_f
Macaddr_Column: 
  data_regexp: "[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){3}"
  generalize: VARCHAR_Column
  rails_type: string
  import_class: Macaddr_Column
  ruby_conversion: str.upcase
Time_Column: 
  data_regexp: "[0-9]+:[0-9.]+( ?[PApa][Mm])?"
  generalize: VARCHAR_Column
  rails_type: time
  import_class: Time_Column
  ruby_conversion: Time.parse(str)
Timestamp_Column: 
  data_regexp: ([0-9]{1,4}/|[ADFJMNOS][a-z]+ )[0-9][0-9][, /][0-9]{2,4}( [0-9]+:[0-9.]+( ?[PApa][Mm])?)?
  generalize: VARCHAR_Column
  rails_type: timestamp
  import_class: Timestamp_Column
  ruby_conversion: Time.parse(str)
NULL_Column: 
  data_regexp: '\s*'
  generalize: VARCHAR_Column
  rails_type: nil
  import_class: NULL_Column
  ruby_conversion: nil
Boolean_Column: 
  data_regexp: "[Tt][Rr][Uu][Ee]"
  generalize: VARCHAR_Column
  rails_type: boolean
  import_class: Boolean_Column
  ruby_conversion: TrueClass
Boolean_Column: 
  data_regexp: "[Ff][Aa][Ll][Ss][Ee]"
  generalize: VARCHAR_Column
  rails_type: boolean
  import_class: Boolean_Column
  ruby_conversion: eval(str.downcase)
Inet_Column: 
  data_regexp: "[0-9.]{1,3}\\.[0-9.]{1,3}\\.[0-9.]{1,3}\\.[0-9.]{1,3}(/[1-3]?[0-9])?"
  generalize: VARCHAR_Column
  rails_type: inet
  import_class: Inet_Column
  ruby_conversion: IPAddr.new(str)

alnum:
  data_regexp: "[[:alnum:]]" #- Alphabetic and numeric character
  generalize: word
  import_class: alnum
  ruby_conversion: str
alpha:
  data_regexp: "[[:alpha:]]" # Alphabetic character
  generalize: alnum
  import_class: alpha
  ruby_conversion: str
blank:
  data_regexp: "[[:blank:]]" # Space or tab
  generalize: space
  import_class: blank
  ruby_conversion: str
cntrl:
  data_regexp: "[[:cntrl:]]" # Control character
  generalize: ascii
  import_class: cntl
  ruby_conversion: str
digit:
  data_regexp: "[[:digit:]]" # Digit
  generalize: xdigit
  import_class: digit
  ruby_conversion: str
graph:
  data_regexp: "[[:graph:]]" # Non-blank character (excludes spaces, control characters, and similar)
  generalize: print
  import_class: graph
  ruby_conversion: str
lower:
  data_regexp: "[[:lower:]]" # Lowercase alphabetical character
  generalize: alpha
  import_class: lower
  ruby_conversion: str
print:
  data_regexp: "[[:print:]]" # Like [:graph:], but includes the space character
  generalize: ascii
  import_class: print
  ruby_conversion: str
punct:
  data_regexp: "[[:punct:]]" # Punctuation character
  generalize: graph
  import_class: punct
  ruby_conversion: str
space:
  data_regexp: "[[:space:]]" # Whitespace character ([:blank:], newline, carriage return, etc.)
  generalize: ascii
  import_class: space
  ruby_conversion: str
upper:
  data_regexp: "[[:upper:]]" # Uppercase alphabetical
  generalize: alpha
  import_class: upper
  ruby_conversion: str
xdigit:
  data_regexp: "[[:xdigit:]]" # Digit allowed in a hexadecimal number (i.e., 0-9a-fA-F)
  generalize: alnum
  import_class: xdigit
  ruby_conversion: str
word:
  data_regexp: "\w" # A character in one of the following Unicode general categories Letter, Mark, Number, <i>Connector_Punctuation<i/i>
  generalize: graph
  import_class: word
  ruby_conversion: str
ascii:
  data_regexp: "[\\x00-\\xff]"
  generalize: VARCHAR_Column
  import_class: ascii
  ruby_conversion: str
