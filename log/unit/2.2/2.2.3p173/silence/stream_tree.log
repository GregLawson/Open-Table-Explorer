{:current_branch_name => "passed",
:start_time => "2016-07-08 05:30:25.644",
:command_string => "/usr/bin/time --verbose ruby -v -W0 /home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb",
:output => "ruby 2.2.4p230 (2015-12-16) [x86_64-linux-gnu]\nLoaded suite /home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test\nStarted\nE\n===============================================================================\nError: test_Assertions(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:154:in `inspect_node'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:225:in `assert_pre_conditions'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:194:in `test_Assertions'\n     191:   end # inspect_recursive\n     192: \n     193:   def test_Assertions\n  => 194:     Connectivity.assert_pre_conditions\n     195:     Connectivity.assert_post_conditions\n     196:   end # Assertions\n     197: \n===============================================================================\n..F\n===============================================================================\nFailure:\n  <[:children?]> expected to include\n  <:each_pair>.\ntest_NestedArrayType_Assertions(StreamTreeTest)\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:219:in `test_NestedArrayType_Assertions'\n     216:     assert_includes(NestedArrayType.methods, :children?)\n     217:     assert_empty(NestedArrayType::ClassMethods.methods(false))\n     218:     assert_empty(NestedArrayType::ClassMethods.methods(false))\n  => 219:     assert_includes(NestedArrayType::ClassMethods.instance_methods(false), :each_pair)\n     220:     #\tassert_includes(NestedArrayType::ClassMethods.instance_methods, :ref)\n     221:     assert_equal(NestedArrayType.instance_methods, [])\n     222: \n===============================================================================\n.E\n===============================================================================\nError: test_Node_format(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:154:in `inspect_node'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:263:in `test_Node_format'\n     260:   end # test_node_Examples\n     261: \n     262:   def test_Node_format\n  => 263:     assert_equal(Inspect_node_root, NestedArrayType.inspect_node(Nested_array))\n     264:     assert_equal(Inspect_node_root, NestedArrayType.inspect_node(Nested_array, &Node_format))\n     265:     #\tassert_match(/cat/, Tree_node_format.call('cat', depth=0, false))\n     266:   end # Node_format\n===============================================================================\nE\n===============================================================================\nError: test_at(StreamTreeTest): NoMethodError: undefined method `explain_assert_respond_to' for #<StreamTreeTest:0x0000000321ac48>\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:243:in `test_at'\n     240: \n     241:   def test_at\n     242:     assert_includes(Node::Examples::Nested_array_root.methods, :at, Node::Examples::Nested_array_root.inspect)\n  => 243:     explain_assert_respond_to(Node::Examples::Nested_array_root, :at, Node::Examples::Nested_array_root.inspect)\n     244:     assert_equal(GraphPath.new(*Root_path), Root_path)\n     245:     path = GraphPath.new(Root_path)\n     246:     assert_empty(Root_path.parent_index)\n===============================================================================\n.F\n===============================================================================\nFailure:\n  The object must respond to :empty?.\n  <nil>.respond_to?(:empty?) expected\n  (Class: <NilClass>)\ntest_children?(StreamTreeTest)\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:118:in `test_children?'\n     115:   end # square_brackets\n     116: \n     117:   def test_children?\n  => 118:     assert_empty(nil)\n     119:     assert(nil.to_a.empty?) # allows uniform testing of empty Array and nil\n     120:     assert_equal(Nested_array, Connectivity.children?(Nested_array))\n     121:     assert_equal(Son_nested_array, Connectivity.children?(Son_nested_array), 'Son_nested_array = ' + Son_nested_array.inspect)\n===============================================================================\n.N\n===============================================================================\nStreamTreeTest#test_each_pair was redefined [test_each_pair(StreamTreeTest)]\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:198:in `<class:StreamTreeTest>'\n===============================================================================\n.....E\n===============================================================================\nError: test_inspect_node(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:154:in `inspect_node'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:144:in `test_inspect_node'\n     141:   end # map_pair\n     142: \n     143:   def test_inspect_node\n  => 144:     assert_equal(Inspect_node_root, NestedArrayType.inspect_node(Nested_array))\n     145:     assert_equal('[2, [3], 4]', NestedArrayType.inspect_node(Son_nested_array))\n     146:     assert_equal('3', NestedArrayType.inspect_node(Grandson_nested_array))\n     147:     assert_match(NestedArrayType.inspect_node(Nested_array), Tree_node_root)\n===============================================================================\n.E\n===============================================================================\nError: test_inspect_recursive(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:154:in `inspect_node'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:249:in `block in <module:Examples>'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:173:in `map_recursive'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:183:in `test_inspect_recursive'\n     180:   end # inspect_nonterminal?\n     181: \n     182:   def test_inspect_recursive\n  => 183:     assert_equal(Grandson_nested_array_map, NestedArrayType.map_recursive(Grandson_nested_array, depth = 2, &Tree_node_format))\n     184:     assert_equal(Son_nested_array_map, NestedArrayType.map_recursive(Son_nested_array, depth = 1, &Tree_node_format))\n     185:     assert_equal(Nested_array_map, NestedArrayType.map_recursive(Nested_array, &Tree_node_format))\n     186:     assert_equal((Nested_array_map.flatten.map { |s| s + \"\\n\" }
).join, NestedArrayType.inspect_recursive(Nested_array, &Tree_node_format), NestedArrayType.inspect_recursive(Nested_array, &Tree_node_format))\n===============================================================================\nF\n===============================================================================\nFailure: test_intersection(StreamTreeTest)\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:347:in `test_intersection'\n     344:   def test_intersection\n     345:     assert_equal({}
, {}
 & {}
)\n     346:     assert_equal({ cat: 1 }
, { cat: 1 }
 & { cat: 1 }
)\n  => 347:     assert_equal({}
, { cat: 1 }
 & { dog: 1 }
)\n     348:     assert_equal({ cat: 1 }
, { cat: 1 }
 & { cat: 2 }
)\n     349:     assert_equal({ dog: { bird: 6 }
 }
, { cat: 1, dog: { fish: 5, bird: 6 }
 }
 & { cat: 2, dog:  { bird: 6 }
 }
)\n     350:   end # intersection\n<{}
> expected but was\n<{:dog=>1}
>\n\ndiff:\n? {:dog=>1}
\n===============================================================================\n....E\n===============================================================================\nError: test_map_recursive(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:154:in `inspect_node'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:249:in `block in <module:Examples>'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:157:in `call'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:157:in `test_map_recursive'\n     154:     refute_nil(node)\n     155:     refute_nil(node.graph_type, node.inspect)\n     156:     assert_respond_to(node.graph_type, :inspect_node)\n  => 157:     assert_equal(Tree_node_root, visit_proc.call(NestedArrayType.ref(Nested_array), depth, false))\n     158:     assert_equal(1, Children_nested_array.size)\n     159:     assert_respond_to(Son_nested_array, Children_method_name)\n     160:     assert_instance_of(Array, Grandchildren_nested_array)\n===============================================================================\n...E\n===============================================================================\nError: test_operator(StreamTreeTest): LocalJumpError: no block given (yield)\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:511:in `block in operator'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:507:in `each_pair'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:507:in `operator'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:509:in `block in operator'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:507:in `each_pair'\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:507:in `operator'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:331:in `test_operator'\n     328:     assert_equal({ cat: 1 }
, { cat: 1 }
.operator({ cat: 2 }
, &operator_lambda))\n     329:     assert_equal({ cat: 1 }
, { cat: 1, dog: 3 }
.operator({ cat: 2, dog: 3 }
, &operator_lambda))\n     330:     assert_equal({ fish: 5 }
, { fish: 5, bird: 6 }
.operator({ bird: 6 }
, &operator_lambda))\n  => 331:     assert_equal({ cat: 1, dog: { fish: 5 }
 }
, { cat: 1, dog: { fish: 5, bird: 6 }
 }
.operator({ cat: 2, dog:  { bird: 6 }
 }
, &operator_lambda))\n     332:     assert_equal({ cat: 1 }
, { cat: 1 }
.operator({ dog: 2 }
, &operator_lambda))\n     333:     assert_equal({ cat: 1 }
, { cat: 1 }
.operator({ dog: 1 }
, &operator_lambda))\n     334: \n===============================================================================\n..E\n===============================================================================\nError: test_ref(StreamTreeTest): NameError: undefined local variable or method `ref' for #<StreamTreeTest:0x00000003219370>\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:111:in `test_ref'\n     108: \n     109:   # Connectivity\n     110:   def test_ref\n  => 111:     assert_instance_of(Node, ref)\n     112:   end # ref\n     113: \n     114:   def test_square_brackets(*params)\n===============================================================================\nF\n===============================================================================\nFailure: test_rgl_readme(StreamTreeTest)\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:26:in `test_rgl_readme'\n     23:     assert_equal([5, 6, 1, 2, 3, 4].sort, dg.vertices)\n     24:     assert_equal(true, dg.has_vertex?(4))\n     25:     assert_equal(false, dg.has_vertex?(Object))\n  => 26:     assert_equal('(1-2)(1-6)(2-3)(2-4)(4-5)(6-4)', dg.edges.sort.to_s)\n     27:     assert_equal('(1=2)(1=6)(2=3)(2=4)(5=4)(6=4)', dg.to_undirected.edges.sort.to_s)\n     28: \n     29:     # Add inverse edge (4-2) to directed graph:\n<\"(1-2)(1-6)(2-3)(2-4)(4-5)(6-4)\"> expected but was\n<\"[(1-2), (1-6), (2-3), (2-4), (4-5), (6-4)]\">\n\ndiff:\n? [(1-2), (1-6), (2-3), (2-4), (4-5), (6-4)]\n===============================================================================\n.E\n===============================================================================\nError: test_to_hash(StreamTreeTest): NoMethodError: undefined method `each_pair' for [1, 2, 3]:Array\n/home/greg/Desktop/src/Open-Table-Explorer/app/models/stream_tree.rb:433:in `to_hash'\n/home/greg/Desktop/src/Open-Table-Explorer/test/unit/stream_tree_test.rb:288:in `test_to_hash'\n     285:   end # keys\n     286: \n     287:   def test_to_hash\n  => 288:     assert_equal(Example_array, Example_array.to_hash.to_a.values)\n     289:   end # to_hash\n     290: \n     291:   def test_each_with_index\n===============================================================================\n.\n\nFinished in 0.067630558 seconds.\n------\n35 tests, 125 assertions, 4 failures, 9 errors, 0 pendings, 0 omissions, 1 notifications\n62.8571% passed\n------\n517.52 tests/s, 1848.28 assertions/s\n",
:errors => {}
,
}
