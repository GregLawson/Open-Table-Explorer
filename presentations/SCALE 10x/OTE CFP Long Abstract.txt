<ul>
	<li>Open Table Explorer is a stream based framework and Domain Specific Language for Data Analysis built on top of Ruby Rails, SQL, R, and the ruby language. It is designed to counter the metaphorical problem of our day, "Starving in the midst of plenty." Our homes and the Internet have plenty of software, data, and information, but we are starving with respect to our ability to solve problems.</li>
	<li>Applications include home energy consumption, solar production, health, accounting, and system administration data.</li>
	<li>I propose that in addition to promoting open source, we need to promote open data. Open data is thwarted by data silos and data jails. Data silos exist where data can not be shared between programs (even open source programs). Open Table Explorer addresses data silos with methods for very flexible data acquisition, parsing, and storage of data. Open Table Explorer may be able to get data out of unencrypted data jails.</li>
	<li>Data is in general stored in relational databases, the technology best adapted to sharing digital data between programs. Unfortunately database systems are rather feeble for processing analog data, so we need to add a statistical processing library. The dominant open source statistical library is R; Open Table Explorer can be regarded as an acquisition, parsing, and database front-end to R. This division between digital and analog data processing, has historical roots in the division between commercial and scientific processing applications dominant when databases were first developed. Open Table Explorer also wants to bridge that gap.</li>
	<li>This project started with the application Home Energy Explorer to analyze home energy consumption and solar panel production as a function of weather. But that was a crappy open source project since you would need the same expensive hardware to run it. So it was decided to factor out the weird hardware and code into tables, thus was born the general purpose, does everything, framework Open Table Explorer. </li>
	<li>The constant threat of a general purpose framework is code bloat. Code bloat is countered by designing a relatively small framework (hopefully also conceptually small) that is extensible via several mechanisms. The ruby code base can be extended via the standard ruby gem package management for introducing new libraries. New stream methods are added as database records referencing libraries and including a scrap of ruby glue code. New R methods are introduced through a similar mechanism. New databases are generally introduced by specifying a generalized URI from which to acquire the data together with table, row, and column parsers.</li>
 </ul>